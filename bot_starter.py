"""
SCUM Bunker Timer - Windows Service Starter
Gestor robusto para ejecutar el bot como tarea programada de Windows
"""
import os
import sys
import time
import logging
import subprocess
from datetime import datetime
import traceback
import psutil

# Configurar directorio base
BASE_DIR = r"C:\ScumBunkerTimer"
LOG_DIR = os.path.join(BASE_DIR, "logs")
CONFIG_DIR = os.path.join(BASE_DIR, "config")

# Crear directorios si no existen
os.makedirs(LOG_DIR, exist_ok=True)
os.makedirs(CONFIG_DIR, exist_ok=True)

# Configurar logging
log_file = os.path.join(LOG_DIR, f"bot_service_{datetime.now().strftime('%Y%m%d')}.log")
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file, encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def load_config():
    """Cargar configuraci√≥n desde archivo o variables de entorno"""
    config_file = os.path.join(CONFIG_DIR, "bot_config.txt")
    
    if os.path.exists(config_file):
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if '=' in line and not line.startswith('#'):
                        key, value = line.split('=', 1)
                        os.environ[key.strip()] = value.strip()
            logger.info("‚úÖ Configuraci√≥n cargada desde archivo")
        except Exception as e:
            logger.error(f"‚ùå Error cargando configuraci√≥n: {e}")
    else:
        logger.info("‚ÑπÔ∏è Usando variables de entorno del sistema")
    
    # Verificar token
    if not os.getenv('DISCORD_TOKEN'):
        logger.error("‚ùå DISCORD_TOKEN no configurado")
        return False
    
    return True

def cleanup_old_processes():
    """Limpiar procesos antiguos del bot"""
    try:
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                if 'python' in proc.info['name'].lower():
                    cmdline = ' '.join(proc.info['cmdline'] or [])
                    if 'BunkerAdvice_V2.py' in cmdline:
                        logger.warning(f"üîÑ Terminando proceso anterior PID: {proc.info['pid']}")
                        proc.terminate()
                        proc.wait(timeout=10)
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Error limpiando procesos: {e}")

def check_dependencies():
    """Verificar que todas las dependencias est√©n instaladas"""
    required_files = [
        "BunkerAdvice_V2.py",
        "database_v2.py", 
        "premium_commands.py",
        "subscription_manager.py",
        "requirements.txt"
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(os.path.join(BASE_DIR, file)):
            missing_files.append(file)
    
    if missing_files:
        logger.error(f"‚ùå Archivos faltantes: {missing_files}")
        return False
    
    logger.info("‚úÖ Todos los archivos requeridos est√°n presentes")
    return True

def start_bot():
    """Iniciar el bot con gesti√≥n de errores"""
    bot_script = os.path.join(BASE_DIR, "BunkerAdvice_V2.py")
    
    try:
        logger.info("üöÄ Iniciando SCUM Bunker Timer...")
        
        # Cambiar al directorio del bot
        os.chdir(BASE_DIR)
        
        # Ejecutar el bot
        process = subprocess.Popen(
            [sys.executable, bot_script],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            encoding='utf-8',
            bufsize=1,
            universal_newlines=True
        )
        
        logger.info(f"‚úÖ Bot iniciado con PID: {process.pid}")
        
        # Monitorear el proceso y logs
        while True:
            # Verificar si el proceso sigue corriendo
            return_code = process.poll()
            if return_code is not None:
                # El proceso termin√≥
                remaining_output = process.stdout.read()
                if remaining_output:
                    for line in remaining_output.split('\n'):
                        if line.strip():
                            logger.info(f"BOT: {line}")
                
                logger.error(f"‚ùå Bot termin√≥ con c√≥digo: {return_code}")
                return False
            
            # Leer output en tiempo real
            try:
                line = process.stdout.readline()
                if line:
                    logger.info(f"BOT: {line.strip()}")
            except:
                pass
            
            time.sleep(1)
            
    except Exception as e:
        logger.error(f"‚ùå Error iniciando bot: {e}")
        logger.error(traceback.format_exc())
        return False

def main():
    """Funci√≥n principal con reinicio autom√°tico"""
    logger.info("üîß Iniciando gestor de SCUM Bunker Timer")
    
    # Verificar configuraci√≥n
    if not load_config():
        logger.error("‚ùå Error en configuraci√≥n. Deteniendo.")
        return
    
    # Verificar dependencias
    if not check_dependencies():
        logger.error("‚ùå Dependencias faltantes. Deteniendo.")
        return
    
    # Limpiar procesos anteriores
    cleanup_old_processes()
    time.sleep(2)
    
    max_restarts = 10
    restart_count = 0
    
    while restart_count < max_restarts:
        logger.info(f"üîÑ Intento de inicio #{restart_count + 1}")
        
        success = start_bot()
        
        if success:
            logger.info("‚úÖ Bot funcionando correctamente")
            restart_count = 0  # Reset counter on success
        else:
            restart_count += 1
            if restart_count < max_restarts:
                wait_time = min(30 * restart_count, 300)  # Max 5 minutos
                logger.warning(f"‚è≥ Reintentando en {wait_time} segundos... ({restart_count}/{max_restarts})")
                time.sleep(wait_time)
            else:
                logger.error("‚ùå M√°ximo de reintentos alcanzado. Deteniendo servicio.")
                break
    
    logger.info("üõë Gestor de bot detenido")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üõë Interrupci√≥n manual detectada")
    except Exception as e:
        logger.error(f"‚ùå Error cr√≠tico: {e}")
        logger.error(traceback.format_exc())
