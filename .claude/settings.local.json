{
  "permissions": {
    "allow": [
      "Bash(python:*)",
      "Bash(cp:*)",
      "Bash(timeout 25 python BunkerAdvice_V2.py)",
      "Bash(timeout 30 python BunkerAdvice_V2.py)",
      "Bash(grep:*)",
      "Bash(find:*)",
      "Bash(rm:*)",
      "Bash(git restore:*)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(node:*)",
      "Bash(npm start)",
      "Bash(npm install:*)",
      "Bash(npx react-scripts start:*)",
      "Bash(SET PORT=3001)",
      "Bash(PORT=3001 npm start)",
      "Bash(PORT=3002 npm start)",
      "Bash(pip install:*)",
      "Bash(curl:*)",
      "Bash(set PORT=3002)",
      "Bash(cross-env:*)",
      "Bash($env:PORT=3002)",
      "Bash(dir:*)",
      "Bash(timeout 30 python3:*)",
      "Bash(C:Usersmaximiliano.cAppDataLocalMicrosoftWindowsAppspython.exe init_admin_db.py)",
      "Bash(sqlite3:*)",
      "Bash(powershell:*)",
      "Bash(py init_admin_db.py)",
      "Bash(/c/Users/maximiliano.c/AppData/Local/Microsoft/WindowsApps/python3.exe init_admin_db.py)",
      "Bash(npm --version)",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" init_admin_simple.py)",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -m pip install -r requirements_simple.txt)",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" main.py)",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -m pip install pyjwt cryptography)",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -m pip install passlib[bcrypt])",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" simple_main.py)",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" init_banking_db.py)",
      "Bash(start chrome http://localhost:3002)",
      "Bash(taskkill:*)",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" init_mechanic_db.py)",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" init_mechanic_simple.py)",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport os\nimport sys\nsys.path.append(''app/modules/mechanic'')\nprint(''Current working directory:'', os.getcwd())\nprint(''__file__ location (simulated):'', os.path.abspath(''app/modules/mechanic/routes.py''))\ndb_path = os.path.join(os.path.dirname(''app/modules/mechanic/routes.py''), ''..'', ''..'', ''..'', ''scum_main.db'')\ndb_path = os.path.abspath(db_path)\nprint(''Computed database path:'', db_path)\nprint(''Database exists at computed path:'', os.path.exists(db_path))\n\")",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''C:/Users/maximiliano.c/Documents/ScumBunkerTimer/scum_main.db'')\ncursor = conn.cursor()\ncursor.execute(''PRAGMA table_info(admin_fame_rewards)'')\ncolumns = cursor.fetchall()\nfor col in columns:\n    print(col)\nconn.close()\n\")",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''C:/Users/maximiliano.c/Documents/ScumBunkerTimer/scum_main.db'')\ncursor = conn.cursor()\ncursor.execute(''PRAGMA table_info(admin_banking_account_types)'')\ncolumns = cursor.fetchall()\nfor col in columns:\n    print(col)\nconn.close()\n\")",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''C:/Users/maximiliano.c/Documents/ScumBunkerTimer/scum_main.db'')\ncursor = conn.cursor()\ncursor.execute(''PRAGMA table_info(admin_taxi_vehicles)'')\ncolumns = cursor.fetchall()\nfor col in columns:\n    print(col)\nconn.close()\n\")",
      "Bash(start chrome http://localhost:3002/analytics)",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" init_users_simple.py)",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" init_main_database.py)",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''scum_main.db'')\ncursor = conn.cursor()\n\n# Verificar tablas críticas del Admin Panel\nrequired_tables = [\n    ''admin_fame_rewards'',\n    ''admin_banking_account_types'', \n    ''admin_taxi_vehicles'',\n    ''admin_mechanic_services'',\n    ''admin_users'',\n    ''admin_roles'',\n    ''admin_permissions'',\n    ''user_fame_points'',\n    ''user_bank_accounts'',\n    ''taxi_rides'',\n    ''mechanic_service_requests''\n]\n\nprint(''=== VERIFICACION DE CONSISTENCIA ==='')\nprint(''Tablas requeridas por Admin Panel:'')\nmissing_tables = []\nfor table in required_tables:\n    cursor.execute(''SELECT name FROM sqlite_master WHERE type=\"\"table\"\" AND name=?'', (table,))\n    exists = cursor.fetchone() is not None\n    status = ''[OK]'' if exists else ''[MISSING]''\n    print(f''   {status} {table}'')\n    if not exists:\n        missing_tables.append(table)\n\nprint(f''\\n[RESUMEN] {len(required_tables) - len(missing_tables)}/{len(required_tables)} tablas encontradas'')\nif missing_tables:\n    print(f''[WARNING] Tablas faltantes: {missing_tables}'')\nelse:\n    print(''[SUCCESS] Todas las tablas requeridas existen'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" init_bunkers_db.py)",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''scum_main.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT name FROM sqlite_master WHERE type=\"\"table\"\" ORDER BY name'')\ntables = cursor.fetchall()\nprint(''Tablas existentes:'')\nfor table in tables:\n    print(f''  - {table[0]}'')\nconn.close()\n\")",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''scum_main.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT name FROM sqlite_master WHERE type=\"\"table\"\" ORDER BY name'')\ntables = cursor.fetchall()\nprint(''=== TABLAS EN DATABASE RAIZ ==='')\nfor table in tables:\n    print(f''  - {table[0]}'')\n\n# Verificar si hay tablas admin_bunker\nadmin_bunker_tables = [t[0] for t in tables if ''admin_bunker'' in t[0]]\nif admin_bunker_tables:\n    print(''\\nTablas admin_bunker encontradas:'')\n    for table in admin_bunker_tables:\n        print(f''  - {table}'')\nelse:\n    print(''\\nNo hay tablas admin_bunker en la DB raiz'')\n    \nconn.close()\n\")",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" ADMIN_PANEL/backend/init_bunkers_db.py)",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''scum_main.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT name FROM sqlite_master WHERE type=\"\"table\"\" AND name LIKE \"\"admin_bunker%\"\" ORDER BY name'')\nadmin_tables = cursor.fetchall()\nprint(''=== TABLAS ADMIN BUNKERS ==='')\nfor table in admin_tables:\n    print(f''  ✅ {table[0]}'')\n\ncursor.execute(''SELECT name FROM sqlite_master WHERE type=\"\"table\"\" AND name = \"\"bunkers\"\"'')\nbunkers_table = cursor.fetchall()\nprint(f''\\n=== TABLA PRINCIPAL BUNKERS ==='')\nif bunkers_table:\n    print(''  ✅ bunkers'')\nelse:\n    print(''  ❌ bunkers (NO EXISTE)'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''scum_main.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT name FROM sqlite_master WHERE type=\"\"table\"\" AND name LIKE \"\"admin_bunker%\"\" ORDER BY name'')\nadmin_tables = cursor.fetchall()\nprint(''=== TABLAS ADMIN BUNKERS ==='')\nfor table in admin_tables:\n    print(f''  [OK] {table[0]}'')\n\ncursor.execute(''SELECT name FROM sqlite_master WHERE type=\"\"table\"\" AND name = \"\"bunkers\"\"'')\nbunkers_table = cursor.fetchall()\nprint(f''\\n=== TABLA PRINCIPAL BUNKERS ==='')\nif bunkers_table:\n    print(''  [OK] bunkers'')\n    cursor.execute(''SELECT COUNT(*) FROM bunkers'')\n    count = cursor.fetchone()[0]\n    print(f''      Registros: {count}'')\nelse:\n    print(''  [ERROR] bunkers table missing'')\n\nconn.close()\n\")",
      "Bash(start chrome http://localhost:3002/bunkers)",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''C:/Users/maximiliano.c/Documents/ScumBunkerTimer/scum_main.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT name FROM sqlite_master WHERE type=\"\"table\"\" ORDER BY name'')\ntables = cursor.fetchall()\nprint(''=== TODAS LAS TABLAS EN LA BASE DE DATOS ==='')\nfor table in tables:\n    print(f''  - {table[0]}'')\n    \nprint(f''\\nTotal tablas: {len(tables)}'')\nconn.close()\n\")",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''C:/Users/maximiliano.c/Documents/ScumBunkerTimer/scum_main.db'')\ncursor = conn.cursor()\n\n# Buscar tablas relacionadas con welcome, channels, reset, notifications\nsearch_terms = [''welcome'', ''channel'', ''reset'', ''notification'', ''config'', ''server'']\nrelevant_tables = []\n\ncursor.execute(''SELECT name FROM sqlite_master WHERE type=\"\"table\"\" ORDER BY name'')\nall_tables = [t[0] for t in cursor.fetchall()]\n\nfor table in all_tables:\n    for term in search_terms:\n        if term in table.lower():\n            relevant_tables.append(table)\n            break\n\nprint(''=== TABLAS DE CONFIGURACIÓN RELEVANTES ==='')\nfor table in set(relevant_tables):  # Remove duplicates\n    print(f''  ✅ {table}'')\n    \nprint(f''\\n=== VERIFICANDO CONTENIDO DE TABLAS CLAVE ==='')\n\n# Verificar notification_configs\nprint(''\\n📢 NOTIFICATION_CONFIGS:'')\ntry:\n    cursor.execute(''SELECT * FROM notification_configs LIMIT 3'')\n    rows = cursor.fetchall()\n    cursor.execute(''PRAGMA table_info(notification_configs)'')\n    columns = [col[1] for col in cursor.fetchall()]\n    print(f''   Columnas: {columns}'')\n    print(f''   Registros: {len(rows)}'')\n    if rows:\n        for row in rows[:2]:\n            print(f''   Ejemplo: {row}'')\nexcept Exception as e:\n    print(f''   Error: {e}'')\n\n# Verificar servers  \nprint(''\\n🖥️ SERVERS:'')\ntry:\n    cursor.execute(''SELECT * FROM servers LIMIT 3'')\n    rows = cursor.fetchall()\n    cursor.execute(''PRAGMA table_info(servers)'')\n    columns = [col[1] for col in cursor.fetchall()]\n    print(f''   Columnas: {columns}'')\n    print(f''   Registros: {len(rows)}'')\n    if rows:\n        for row in rows[:2]:\n            print(f''   Ejemplo: {row}'')\nexcept Exception as e:\n    print(f''   Error: {e}'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''C:/Users/maximiliano.c/Documents/ScumBunkerTimer/scum_main.db'')\ncursor = conn.cursor()\n\nprint(''=== TABLAS DE CONFIGURACION RELEVANTES ==='')\n\n# Tablas que contienen configuraciones\nconfig_tables = [\n    ''notification_configs'',\n    ''servers'', \n    ''monitored_servers'',\n    ''admin_banking_channels'',\n    ''admin_bunker_config'',\n    ''admin_taxi_config'',\n    ''admin_mechanic_config''\n]\n\nfor table in config_tables:\n    try:\n        cursor.execute(f''PRAGMA table_info({table})'')\n        columns = [col[1] for col in cursor.fetchall()]\n        cursor.execute(f''SELECT COUNT(*) FROM {table}'')\n        count = cursor.fetchone()[0]\n        print(f''{table}:'')\n        print(f''   Columnas: {columns}'')\n        print(f''   Registros: {count}'')\n        print()\n    except Exception as e:\n        print(f''{table}: No existe o error - {e}'')\n        print()\n\nconn.close()\n\")",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''C:/Users/maximiliano.c/Documents/ScumBunkerTimer/scum_main.db'')\ncursor = conn.cursor()\n\nprint(''=== VERIFICANDO SISTEMA DE BIENVENIDA ==='')\n# Buscar tablas relacionadas con welcome/bienvenida\ncursor.execute(''SELECT name FROM sqlite_master WHERE type=\"\"table\"\" AND (name LIKE \"\"%welcome%\"\" OR name LIKE \"\"%bienvenida%\"\" OR name LIKE \"\"%banking%\"\" OR name LIKE \"\"%channel%\"\") ORDER BY name'')\nwelcome_tables = cursor.fetchall()\n\nfor table in welcome_tables:\n    print(f''Tabla encontrada: {table[0]}'')\n    try:\n        cursor.execute(f''PRAGMA table_info({table[0]})'')\n        columns = cursor.fetchall()\n        print(f''  Columnas: {[col[1] for col in columns]}'')\n        cursor.execute(f''SELECT COUNT(*) FROM {table[0]}'')\n        count = cursor.fetchone()[0]\n        print(f''  Registros: {count}'')\n        if count > 0:\n            cursor.execute(f''SELECT * FROM {table[0]} LIMIT 2'')\n            rows = cursor.fetchall()\n            for row in rows:\n                print(f''  Ejemplo: {row}'')\n        print()\n    except Exception as e:\n        print(f''  Error: {e}'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''C:/Users/maximiliano.c/Documents/ScumBunkerTimer/scum_main.db'')\ncursor = conn.cursor()\n\nprint(''=== CONFIGURACION DE CANALES DISCORD ==='')\n# Buscar todas las tablas que contengan configuración de canales\ncursor.execute(''SELECT name FROM sqlite_master WHERE type=\"\"table\"\" AND (name LIKE \"\"%channel%\"\" OR name LIKE \"\"%config%\"\" OR name LIKE \"\"%notification%\"\") ORDER BY name'')\nchannel_tables = cursor.fetchall()\n\nfor table in channel_tables:\n    print(f''\\nTABLA: {table[0]}'')\n    try:\n        cursor.execute(f''PRAGMA table_info({table[0]})'')\n        columns = cursor.fetchall()\n        channel_columns = [col for col in columns if ''channel'' in col[1].lower() or ''id'' in col[1].lower()]\n        \n        if channel_columns:\n            print(f''   Columnas relacionadas con canales: {[col[1] for col in channel_columns]}'')\n            cursor.execute(f''SELECT COUNT(*) FROM {table[0]}'')\n            count = cursor.fetchone()[0]\n            print(f''   Registros: {count}'')\n            \n            if count > 0:\n                cursor.execute(f''SELECT * FROM {table[0]} LIMIT 3'')\n                rows = cursor.fetchall()\n                for i, row in enumerate(rows):\n                    # Solo mostrar primeros 5 campos para evitar problemas de encoding\n                    limited_row = row[:5] if len(row) > 5 else row\n                    print(f''   Registro {i+1}: {limited_row}...'')\n        print()\n    except Exception as e:\n        print(f''   Error: {e}'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport sqlite3\nconn = sqlite3.connect(''C:/Users/maximiliano.c/Documents/ScumBunkerTimer/scum_main.db'')\ncursor = conn.cursor()\n\nprint(''=== SISTEMA DE ALERTAS DE REINICIO ==='')\n# Buscar tablas relacionadas con reset, schedule, alert\ncursor.execute(''SELECT name FROM sqlite_master WHERE type=\"\"table\"\" AND (name LIKE \"\"%reset%\"\" OR name LIKE \"\"%schedule%\"\" OR name LIKE \"\"%alert%\"\" OR name LIKE \"\"%server%\"\" OR name LIKE \"\"%monitored%\"\") ORDER BY name'')\nreset_tables = cursor.fetchall()\n\nfor table in reset_tables:\n    print(f''\\nTABLA: {table[0]}'')\n    try:\n        cursor.execute(f''PRAGMA table_info({table[0]})'')\n        columns = cursor.fetchall()\n        print(f''   Columnas: {[col[1] for col in columns]}'')\n        cursor.execute(f''SELECT COUNT(*) FROM {table[0]}'')\n        count = cursor.fetchone()[0]\n        print(f''   Registros: {count}'')\n        \n        if count > 0:\n            cursor.execute(f''SELECT * FROM {table[0]} LIMIT 2'')\n            rows = cursor.fetchall()\n            for i, row in enumerate(rows):\n                # Mostrar solo algunos campos para evitar problemas de encoding\n                limited_row = str(row)[:100] + ''...'' if len(str(row)) > 100 else str(row)\n                print(f''   Ejemplo {i+1}: {limited_row}'')\n        print()\n    except Exception as e:\n        print(f''   Error: {e}'')\n\nconn.close()\n\")",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport requests\nimport json\n\nprint(''=== TESTING SUPER ADMIN MODULE ==='')\n\n# Test Super Admin Health Check\nprint(''\\n1. Health Check:'')\ntry:\n    response = requests.get(''http://localhost:8000/api/v1/superadmin/health'')\n    print(f''   Status: {response.status_code}'')\n    if response.status_code == 200:\n        print(f''   Response: {response.json()}'')\n    else:\n        print(f''   Error: {response.text}'')\nexcept Exception as e:\n    print(f''   Connection Error: {e}'')\n\n# Test Global Dashboard\nprint(''\\n2. Global Dashboard:'')\ntry:\n    response = requests.get(''http://localhost:8000/api/v1/superadmin/dashboard'')\n    print(f''   Status: {response.status_code}'')\n    if response.status_code == 200:\n        data = response.json()\n        print(f''   Total Servers: {data[\"\"analytics\"\"][\"\"total_servers\"\"]}'')\n        print(f''   Monthly Revenue: $data[\\\"\"analytics\\\"\"][\\\"\"monthly_revenue\\\"\"]'')\n        print(f''   System Health: {data[\"\"analytics\"\"][\"\"system_health\"\"][\"\"overall_uptime\"\"]}% uptime'')\n        print(f''   Alerts: {len(data[\"\"alerts\"\"])} active'')\n    else:\n        print(f''   Error: {response.text}'')\nexcept Exception as e:\n    print(f''   Connection Error: {e}'')\n\n# Test Servers Management  \nprint(''\\n3. Servers Management:'')\ntry:\n    response = requests.get(''http://localhost:8000/api/v1/superadmin/servers'')\n    print(f''   Status: {response.status_code}'')\n    if response.status_code == 200:\n        data = response.json()\n        print(f''   Total Servers Found: {data[\"\"total_count\"\"]}'')\n        print(f''   Free Servers: {data[\"\"subscription_summary\"\"][\"\"free\"\"]}'')\n        print(f''   Premium Servers: {data[\"\"subscription_summary\"\"][\"\"premium\"\"]}'')\n        print(f''   VIP Servers: {data[\"\"subscription_summary\"\"][\"\"vip\"\"]}'')\n        if data[\"\"servers\"\"]:\n            print(f''   First Server: {data[\"\"servers\"\"][0][\"\"guild_name\"\"]} ({data[\"\"servers\"\"][0][\"\"subscription_plan\"\"]})'')\n    else:\n        print(f''   Error: {response.text}'')\nexcept Exception as e:\n    print(f''   Connection Error: {e}'')\n\n# Test Subscription Management\nprint(''\\n4. Subscription Management:'')\ntry:\n    response = requests.get(''http://localhost:8000/api/v1/superadmin/subscriptions'')\n    print(f''   Status: {response.status_code}'')\n    if response.status_code == 200:\n        data = response.json()\n        print(f''   Monthly Recurring Revenue: $data[\\\"\"revenue_summary\\\"\"][\\\"\"monthly_recurring\\\"\"]'')\n        print(f''   Active Subscriptions: {len(data[\"\"active_subscriptions\"\"])}'')\n        print(f''   Annual Projection: $data[\\\"\"revenue_summary\\\"\"][\\\"\"annual_projection\\\"\"]'')\n    else:\n        print(f''   Error: {response.text}'')\nexcept Exception as e:\n    print(f''   Connection Error: {e}'')\n\nprint(''\\n=== SUPER ADMIN MODULE TEST COMPLETED ==='')\n\")",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -m pip install requests)",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" -c \"\nimport requests\nimport json\n\n# Test Global Dashboard\nr = requests.get(''http://localhost:8000/api/v1/superadmin/dashboard'')\ndata = r.json()\nprint(''=== SUPER ADMIN DASHBOARD TEST ==='')\nprint(f''Total Servers: {data[\"\"analytics\"\"][\"\"total_servers\"\"]}'')\nprint(f''Premium Servers: {data[\"\"analytics\"\"][\"\"premium_servers\"\"]}'')\nprint(f''Monthly Revenue: $data[\\\"\"analytics\\\"\"][\\\"\"monthly_revenue\\\"\"]'')\nprint(f''System Uptime: {data[\"\"analytics\"\"][\"\"system_health\"\"][\"\"overall_uptime\"\"]}%'')\nprint(f''Active Alerts: {len(data[\"\"alerts\"\"])}'')\nprint(f''Top Servers: {len(data[\"\"top_servers\"\"])}'')\nprint(f''Recent Actions: {len(data[\"\"recent_actions\"\"])}'')\nprint(''DASHBOARD TEST: SUCCESS ✅'')\n\")",
      "Bash(\"C:\\Users\\maximiliano.c\\AppData\\Local\\Programs\\Python\\Python313\\python.exe\" test_superadmin.py)",
      "Bash(npm run build:*)",
      "Bash(start chrome http://localhost:3002/superadmin)"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "C:\\Users\\maximiliano.c\\AppData\\Local\\Microsoft\\WindowsApps",
      "C:\\Users\\maximiliano.c"
    ]
  }
}